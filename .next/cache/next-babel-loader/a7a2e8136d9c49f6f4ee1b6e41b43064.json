{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const request = async (params = {}) => {\n  const requestParam = _objectSpread({\n    limits: '100'\n  }, params);\n\n  let query = Object.keys(requestParam).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(requestParam[k])).join('&');\n  const url = `https://api.spaceXdata.com/v3/launches?${query}`;\n  const res = await fetch(url);\n  const json = await res.json();\n  return json;\n};\nexport const getYears = data => {\n  let landing = [];\n  let year = [];\n  let launch = [];\n  data.forEach(item => {\n    if (landing.indexOf(item.launch_year) == -1) {\n      landing.push(item.launch_year);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/anskhull/Downloads/test/interview-test/interview-test/src/utils/index.js"],"names":["request","params","requestParam","limits","query","Object","keys","map","k","encodeURIComponent","join","url","res","fetch","json","getYears","data","landing","year","launch","forEach","item","indexOf","launch_year","push"],"mappings":";;;;;;AAAA,OAAO,MAAMA,OAAO,GAAG,OAAOC,MAAM,GAAG,EAAhB,KAAuB;AAC5C,QAAMC,YAAY;AAChBC,IAAAA,MAAM,EAAE;AADQ,KAEbF,MAFa,CAAlB;;AAKA,MAAIG,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,YAAZ,EACTK,GADS,CACLC,CAAC,IAAIC,kBAAkB,CAACD,CAAD,CAAlB,GAAwB,GAAxB,GAA8BC,kBAAkB,CAACP,YAAY,CAACM,CAAD,CAAb,CADhD,EAETE,IAFS,CAEJ,GAFI,CAAZ;AAGA,QAAMC,GAAG,GAAI,0CAAyCP,KAAM,EAA5D;AAEA,QAAMQ,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACA,SAAOA,IAAP;AACD,CAdM;AAgBP,OAAO,MAAMC,QAAQ,GAAGC,IAAI,IAAI;AAC9B,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,MAAM,GAAG,EAAb;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAaC,IAAI,IAAI;AACnB,QAAIJ,OAAO,CAACK,OAAR,CAAgBD,IAAI,CAACE,WAArB,KAAqC,CAAC,CAA1C,EAA6C;AAC3CN,MAAAA,OAAO,CAACO,IAAR,CAAaH,IAAI,CAACE,WAAlB;AACD;AACF,GAJD;AAKD,CATM","sourcesContent":["export const request = async (params = {}) => {\n  const requestParam = {\n    limits: '100',\n    ...params,\n  }\n\n  let query = Object.keys(requestParam)\n    .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(requestParam[k]))\n    .join('&')\n  const url = `https://api.spaceXdata.com/v3/launches?${query}`\n\n  const res = await fetch(url)\n  const json = await res.json()\n  return json\n}\n\nexport const getYears = data => {\n  let landing = []\n  let year = []\n  let launch = []\n  data.forEach(item => {\n    if (landing.indexOf(item.launch_year) == -1) {\n      landing.push(item.launch_year)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}