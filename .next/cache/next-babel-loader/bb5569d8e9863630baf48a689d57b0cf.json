{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var request = function request() {\n  var url, res, json;\n  return _regeneratorRuntime.async(function request$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = 'https://api.spaceXdata.com/v3/launches';\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(url, {\n            method: 'GET',\n            body: JSON.stringify(_objectSpread({}, requestOptions, {\n              limit: 100\n            }))\n          }));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/anskhull/Downloads/test/interview-test/interview-test/src/utils/index.js"],"names":["request","url","fetch","method","body","JSON","stringify","requestOptions","limit","res","json"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,GADe,GACT,wCADS;AAAA;AAAA,2CAEHC,KAAK,CAACD,GAAD,EAAM;AAC3BE,YAAAA,MAAM,EAAE,KADmB;AAE3BC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,mBACDC,cADC;AAEJC,cAAAA,KAAK,EAAE;AAFH;AAFqB,WAAN,CAFF;;AAAA;AAEfC,UAAAA,GAFe;AAAA;AAAA,2CASFA,GAAG,CAACC,IAAJ,EATE;;AAAA;AASfA,UAAAA,IATe;AAAA,2CAUdA,IAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["export const request = async () => {\n  const url = 'https://api.spaceXdata.com/v3/launches'\n  const res = await fetch(url, {\n    method: 'GET',\n    body: JSON.stringify({\n      ...requestOptions,\n      limit: 100,\n    }),\n  })\n  const json = await res.json()\n  return json\n}\n"]},"metadata":{},"sourceType":"module"}